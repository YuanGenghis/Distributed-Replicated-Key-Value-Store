#!/usr/bin/env python3

import sys
import socket
import select
import time
import json
import random
import copy

FOLLOWER = "follower"
CANDIDATE = "candidate"
LEADER = "leader"


class KeyValueStore:

    def __init__(self, my_id, replica_ids):
        self.my_id = my_id
        self.replica_ids = replica_ids
        self.term = 0
        self.leader_id = "FFFF"
        self.state = FOLLOWER
        self.state_machine = {}
        self.logs = []
        self.next_index_to_be_committed = 1
        self.current_index_to_be_committed = 0

        # estimate the heart beat timeout
        self.heart_beat_timeout = 0

        self.sock = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
        # Connect to the network. All messages to/from other replicas and clients will occur over this socket
        self.sock.connect(my_id)
        self.vote = False
        self.vote_to = "FFFF"
        self.received_votes = 0
        self.election_timeout = None
        self.set_new_election_time_out()

    def set_new_election_time_out(self):
        self.election_timeout = (random.randrange(150, 300)) / 1000
        self.sock.settimeout(self.election_timeout)

    def heartbeat(self, log_entry):
        # log entry may None if no customer request

        for a_replica in self.replica_ids:
            msg = {"src": self.my_id, "dst": a_replica, "leader": self.leader_id, "type": "heartbeat",
                   "log": log_entry, "term": self.term}
            print("send heartbeat", msg)
            self.sock.send(json.dumps(msg).encode())
        return

    # if no client request yet, send empty heart beat periodically to show self alive:
    # 1. handel ack(from empty heartbeat), if majority heartbeat ack receive, resend heartbeat
    # if got client request:
    # 1. write request to log
    # 2. send out log to all followers(log: put/get)
    # 3. expect response from followers:
    #    3.1 if majority (accepts) received
    #        -> write log to the state machine
    #        -> send back "ok" to client
    #    3.2 received most rejected -> (maybe?)try again
    # if not received enough ack dont heart beat, or send log to followers
    def leader_send_append_entries(self):
        self.sock.settimeout(None)
        empty_heartbeat_ack = 4
        append_entries_ack = 0

        # send the first heartbeat
        self.heartbeat("")

        while True:
            print("here is leader:", self.leader_id)
            ready = select.select([self.sock], [], [], 0.1)[0]

            if self.sock in ready:

                msg_raw = self.sock.recv(32768).decode()

                msg = json.loads(msg_raw)
                print("leader:", msg)
                time.sleep(1)

                if msg['type'] in ['get', 'put']:
                    # add term number and current to be committed index to msg ensure the consistency
                    msg["term"] = copy.deepcopy(self.term)
                    msg["index"] = copy.deepcopy(self.current_index_to_be_committed)
                    msg["leader"] = self.leader_id
                    self.logs.append(msg)
                elif msg["type"] == "ack_heartbeat":
                    # receive empty ack
                    empty_heartbeat_ack += 1
                elif msg["type"] == "ack":
                    # receive append_entries ack
                    is_accept = msg["accept"]
                    if is_accept:
                        append_entries_ack += 1

                if empty_heartbeat_ack == 4:
                    # empty_heartbeat_ack = 0
                    if append_entries_ack == 0 and (len(self.logs) > self.next_index_to_be_committed):
                        print("leader send out log heartbeat")
                        print("current index to be committed", self.current_index_to_be_committed)
                        print("log length", len(self.logs))
                        log = copy.deepcopy(self.logs[self.current_index_to_be_committed])
                        self.heartbeat(log)
                    else:
                        # self.heartbeat("")
                        continue
                elif append_entries_ack == 4:
                    append_entries_ack = 0
                    # (get) -> what if the key really does not exist
                    self.current_index_to_be_committed += 1
                    self.next_index_to_be_committed += 1
                    log = self.logs[self.current_index_to_be_committed]
                    self.leader_response_client(log)
                elif (empty_heartbeat_ack == 0) and (len(self.logs) < self.next_index_to_be_committed):
                    # self.heartbeat("")
                    continue

    def leader_response_client(self, log):
        request_ype = log["type"]
        if request_ype == "get":
            self.get(msg)
        elif request_ype == "put":
            self.put(msg)

    def get(self, msg):
        key = msg["key"]
        new_msg = {"src": self.my_id, "dst": msg["src"], "leader": self.leader_id, "type": "fail", "MID": msg["MID"]}
        if key in self.state_machine:
            value = self.state_machine[key]
            new_msg["type"] = "ok"
            new_msg["value"] = value
        print(new_msg)
        self.sock.send(json.dumps(new_msg).encode())
        return

    def put(self, msg):
        # in which case can put fail?
        key = msg["key"]
        value = msg["value"]
        self.state_machine[key] = value
        new_msg = {"src": self.my_id, "dst": msg["src"], "leader": self.leader_id, "type": "ok", "MID": msg["MID"]}
        self.sock.send(json.dumps(new_msg).encode())
        print(new_msg)
        return True

    def follower_response_append_entries(self, msg):
        # compare term and index
        log = msg["log"]
        leader_term = log["term"]
        leader_log_index = log["index"]
        leader_id = msg["src"]

        ack = {"src": self.my_id, "dst": leader_id, "leader": self.leader_id,
               "type": "ack", "log": log, "accept": True}

        if self.term == leader_term and self.current_index_to_be_committed == leader_log_index:
            self.logs.append(log)
            self.current_index_to_be_committed += 1
            if log["type"] == "put":
                key = log["key"]
                value = log["value"]
                self.state_machine[key] = value
            elif log["type"] == "get":
                if not log["key"] in self.state_machine:
                    ack["accept"] = False
                    self.current_index_to_be_committed -= 1
            if ack["accept"]:
                self.logs.append(log)
        else:
            ack["accept"] = False
        print(ack)
        self.sock.send(json.dumps(ack).encode())
        return

    def handel_follower_response(self):
        print("leader is:", self.my_id, self.leader_id)
        while True:
            # try to receive message either from client or leader
            try:
                msg_raw = self.sock.recv(32768)
            except socket.timeout:
                # timeout become to candidate, start new election
                self.follower_start_over_election()
                return
            else:
                msg = json.loads(msg_raw.decode())
                print("msg received by follower:", msg)
                from_who = msg["src"]
                if from_who in self.replica_ids:
                    # response heartbeat or Append Entry RPC
                    if msg["type"] == "heartbeat":
                        if msg["log"]:
                            # ack Append Entry RPC
                            self.follower_response_append_entries(msg)
                        else:
                            # ack heartbeat
                            ack = {"src": self.my_id, "dst": from_who, "leader": self.leader_id,
                                   "type": "ack_heartbeat"}
                            self.sock.send(json.dumps(ack).encode())
                else:
                    # redirect the client
                    print("follower redirect")
                    redirect_msg = {"src": self.my_id, "dst": from_who, "leader": self.leader_id, "type": "redirect",
                                    "MID": msg["MID"]}
                    self.sock.send(json.dumps(redirect_msg).encode())
                    time.sleep(1)

    def request_vote(self):
        request_vote_msg = {"src": self.my_id, "dst": None, "leader": self.leader_id, "type": "request_vote",
                            "term": self.term}
        for a_replica in self.replica_ids:
            request_vote_msg[dst] = a_replica
            self.sock.send(json.dumps(request_vote_msg).encode())
        return

    def follower_start_over_election(self):
        self.leader_id = "FFFF"
        self.state = CANDIDATE
        self.vote_to = self.my_id
        self.received_votes = 1
        self.new_leader_election()

    def new_leader_election(self):
        self.term += 1
        while True:
            try:
                raw_received_msg = self.sock.recv(32768)
            except socket.timeout():
                if self.state == FOLLOWER:
                    self.term += 1
                    self.state = CANDIDATE
                    self.vote_self()
                    self.request_vote()
                elif self.state == CANDIDATE:
                    self.term += 1
                    self.vote = 1
                    self.vote_to = self.my_id
                    self.request_vote()
            else:
                received_msg = json.loads(raw_received_msg.decode())
                recv_msg_type = received_msg["type"]
                from_who = received_msg["src"]
                send_out_message = {"src": self.my_id, "dst": from_who, "leader": self.leader_id, "type": None,
                                    "term": self.term}
                if recv_msg_type == "request_vote":
                    vote = 0
                    send_out_message["type"] = "vote"
                    if self.state == FOLLOWER:
                        vote = self.vote_to_other(from_who)
                    elif self.state == CANDIDATE:
                        if recv_msg_type["term"] == self.term:
                            self.set_new_election_time_out()
                        if recv_msg_type["term"] > self.term:
                            self.state = FOLLOWER
                            vote = 1
                            self.vote_to = from_who
                            self.vote = 0
                    send_out_message["vote"] = vote
                    self.sock.send(json.dumps(send_out_message).encode())
                elif recv_msg_type == "vote":
                    if self.state == CANDIDATE:
                        received_vote = received_msg["vote"]
                        self.received_votes += received_vote
                        # set to 4 for now.....
                        if self.received_votes == 4:
                            self.state = LEADER
                            self.leader_send_append_entries()
                            return
                elif recv_msg_type == "heartbeat":
                    send_out_message["type"] = "ack_heartbeat"
                    send_out_message["accept"] = False
                    if self.state == FOLLOWER:
                        self.leader_id = from_who
                        send_out_message["accept"] = True
                    elif self.state == CANDIDATE:
                        if received_msg["term"] >= self.term:
                            send_out_message["accept"] = True
                            self.leader_id = from_who
                            self.state = FOLLOWER
                            self.received_votes = 0
                        elif received_msg["term"] < self.term:
                            # continue for now ......
                            continue
                    self.sock.send(json.dumps(send_out_message).encode())
                    # go into follower mode for all cases for now
                    self.handel_follower_response()
                    return

    def vote_self(self):
        if not self.vote:
            self.vote_to = self.my_id
            self.term += 1
            self.vote = True
            self.received_votes += 1
        return

    def vote_to_other(self, recv_from_id):
        if not self.vote:
            self.term += 1
            self.vote = True
            self.vote_to = recv_from_id
            return 1
        return 0

    def start(self):
        self.new_leader_election()


########################################################################################################################

if __name__ == "__main__":
    # Read in id's
    # Your ID number
    read_my_id = sys.argv[1]

    # The ID numbers of all the other replicas
    read_replica_ids = sys.argv[2:]

    key_value_store = KeyValueStore(read_my_id, read_replica_ids)
    key_value_store.start()