#!/usr/bin/env python
#!/usr/bin/env python
i
import sys, socket, select, time, json, random



FOLLOWER = "FOLLOWER"
CANDIDATE = "CANDIDATE"
LEADER = "LEADER"



# Your ID number
my_id = sys.argv[1]
# The ID numbers of all the other replicas
replica_ids = sys.argv[2:]


# Connect to the network. All messages to/from other replicas and clients will
# occur over this socket
sock = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
sock.connect(my_id)
last = 0





class node_system:
    def __init__(self):
        self.state = FOLLOWER
        self.term = 0
        self.countVote = -1
        self.selectVote = None
        self.stamp = time.time()
        self.leader = 'FFFF'
        self.data = {}
        self.electionTimeout = random.randint(150, 300) / 1000

        
    def setTime(self):
        tm = time.time()
        if self.state == LEADER:
            #heratbeat timeout = 0,1
            if tm > self.stamp + 0.1:
                for rid in replica_ids:
                    msg = {'src': my_id, 'dst': rid, 'leader': my_id, 'type': 'heartbeat', 'term': self.term}
                    sock.send(json.dumps(msg))
        elif tm > self.stamp + self.electionTimeout:
            self.stamp = time.time()
            self.electionTimeout = random.randint(150, 300) / 1000
            if self.state == FOLLOWER:
                self.state = CANDIDATE
                self.term += 1
                if self.selectVote is None:
                    self.selectVote = my_id
                    self.countVote = 1
                    
                for rid in replica_ids:
                    msg = {'src': my_id, 'dst': rid, 'leader': self.leader, 'type': 'voteRequest', "term": self.term}
                    sock.send(json.dumps(msg)) 


    def handleMessage(self,msg):
        if msg['type'] in ['get', 'put']:
            if (self.leader == my_id):
                if msg['type'] == 'get':
                    k = msg['key']
                    if k in self.data:
                        msg = {'src': my_id, 'dst': msg['src'], 'leader': self.leader,'type': 'ok', 'MID': msg['MID'], 'value': node.data[k]}
                        sock.send(json.dumps(msg))
                    else:
                        msg = {'src': my_id, 'dst': msg['src'], 'leader': self.leader,'type': 'ok', 'MID': msg['MID']}
                        sock.send(json.dumps(msg))
                else:
                    k = msg['key']
                    node.data[k] = msg['value']
                    msg = {'src': my_id, 'dst': msg['src'], 'leader': self.leader,'type': 'ok', 'MID': msg['MID']}
                    sock.send(json.dumps(msg))
            elif (node.leader == 'FFFF'):
                msg = {'src': my_id, 'dst': msg['src'], 'leader': self.leader,'type': 'fail', 'MID': msg['MID']}
                sock.send(json.dumps(msg))
            else:
                msg = {'src': my_id, 'dst': msg['src'], 'leader': self.leader,'type': 'redirect', 'MID': msg['MID']}
                sock.send(json.dumps(msg))
        elif (msg['type'] == 'vote'):
            self.countVote += 1
            if (self.countVote > (len(replica_ids) + 1) / 2 + 1):
                self.state = LEADER
                self.countVote = -1
                self.selectVote = None
                self.leader = my_id
                for rid in replica_ids:
                    msg = {'src': my_id, 'dst': rid, 'leader': self.leader, 'type': 'heartbeat', 'term': self.term}
                    sock.send(json.dumps(msg))
                self.stamp = time.time()
        elif (msg['type'] == 'voteRequest'):
            src = msg['src']
            trm = msg['term']
            if trm > self.term:
                self.state = FOLLOWER
                self.selectVote = src
                sMsg = {'src': my_id, 'dst': src, 'leader': self.leader, 'type': 'vote'}
                sock.send(json.dumps(sMsg))
                self.term = trm
                self.stamp = time.time()
                self.electionTimeout = random.randint(150, 300) / 1000
        elif (msg['type'] == 'heartbeat'):
            self.stamp = time.time()
            self.electionTimeout = random.randint(150, 300) / 1000
            self.leader = msg['src']
            self.state = FOLLOWER
            self.countVote = -1
            self.selectVote = None  


node = node_system()


while True:
	ready = select.select([sock], [], [], 0.1)[0]
	
	if sock in ready:
		msg_raw = sock.recv(32768)
		
		if len(msg_raw) == 0: continue
		msg = json.loads(msg_raw)
                node.handleMessage(msg)
        clock = time.time()
        node.setTime()

	if clock-last > 2:
		# Send a no-op message to a random peer every two seconds, just for fun
		# You definitely want to remove this from your implementation
		msg = {'src': my_id, 'dst': random.choice(replica_ids), 'leader': 'FFFF', 'type': 'noop'}
		sock.send(json.dumps(msg))
		#print '%s sending a NOOP to %s' % (msg['src'], msg['dst'])
		last = clock

